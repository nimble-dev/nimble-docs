\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

\chapter{Using NIMBLE models from R}
\label{cha:using-bugs-models}

\section{Some basic concepts and terminology}
\label{sec:some-basic-concepts}

Before going further, we need some basic concepts and terminology to
be able to speak about NIMBLE clearly.  
% First, we must refer users unfamiliar with BUGS to the BUGS manual (or maybe we should provide a short summary?).  
% don't think this line above is needed anymore - CJP

Say we have the following BUGS code

<<echo=FALSE,message=FALSE>>=
read_chunk(file.path('chunks', 'usingBugsModels_chunks.R'))
@ 

<<usingModelsExample>>=
@ 

In NIMBLE terminology:
\begin{itemize}
\item The \textit{variables} of this model are \cd{a}, \cd{y}, \cd{z},
  and \cd{y.squared}.
\item The \textit{nodes} of this model are \cd{a}, \cd{y[1]} $\ldots$
  \cd{y[5]}, \cd{z[1,1]} $\ldots$ \cd{z[5, 3]}, and
  \cd{y.squared[1:5]}.  In graph terminology, nodes are vertices in
  the model graph.
\item the \textit{node functions} of this model are
  \verb|a ~ dnorm(0, 0.001)|, \verb|y[i] ~ dnorm(a, 0.1)|,
  \verb|z[i,j] ~ dnorm(y[i], sd = 0.1)|, and
  \verb|y.squared[1:5] <- y[1:5]^2|.  Each node has a
  corresponding node function.  Sometimes the distinction between
  nodes and node functions is important, but when it is not important
  we may refer to both simply as \textit{nodes}.  
\item  The \textit{scalar elements} of this model include all the scalar
  nodes as well as the scalar elements \cd{y.squared[1]} $\ldots$
  \cd{y.squared[5]} of the multivariate node \cd{y.squared[1:5]}.
\end{itemize}

\section{Accessing variables}
\label{sec:accessing-variables}

Model variables can be accessed and set just as in R using \cd{\$} and
\cd{[[ ]]}.  For example

<<usingModelVars>>=
@ 

\subsection{Accessing log probabilities via logProb variables}
\label{sec:access-log-prob}

For each variable that contains at least one stochastic node, NIMBLE generates a model variable with the
prefix  ``logProb\_''.  When the stochastic node is scalar, the
\cd{logProb} variable will have the same size.  For example:

<<usingModelLogProbs>>=
@ 

Creation of \cd{logProb} variables for stochastic multivariate nodes
is trickier, because they can represent an arbitrary block of a larger
variable.  In general NIMBLE records the logProb values using
the lowest possible indices.  For example, if \cd{x[5:10, 15:20]}
follows a Wishart distribution, its log probability (density) value
will be stored in \cd{logProb\_x[5, 15]}.  When possible, NIMBLE will
reduce the dimensions of the corresponding logProb variable.  For
example, in

<<eval = FALSE>>=
for(i in 1:10) x[i,] ~ dmnorm(mu[], prec[,])
@ 

\cd{x} may be 10$\times$20 (dimensions must be provided), but \cd{logProb\_x}
will be 10$\times$1.  For the most part you do not need to worry about
how NIMBLE is storing the log probability values, because you can
always get them using \cd{getLogProb}.  

\section{Accessing nodes}
\label{sec:accessing-nodes}

While nodes that are part of a variable can be accessed as above, each
node also has its own name that can be used to access it directly.  For
example, \cd{y[2]} has the name ``y[2]'' and can be accessed by that
name as follows:

<<usingNodeNames>>=
@ 

Notice that node names can include index blocks, such as \cd{model[[`z[2:4, 1:2]']]}, and these are not strictly required to correspond to actual nodes.  Such blocks can be subsequently sub-indexed in the regular R manner.

\subsection{How nodes are named}
\label{sec:how-nodes-are}

Every node has a name that is a character string including its
indices, with a space after every comma.  For example, \cd{X[1, 2, 3]}
has the name ``X[1, 2, 3]''.  Nodes following multivariate
distributions have names that include their index blocks.  For
example, a multivariate node for \cd{X[6:10, 3]} has the name ``X[6:10, 3]''.

The definitive source for node names in a model is
\cd{getNodeNames}, described below.  For example

<<multivariateDecExample>>=
@ 

You can see one lifted node for the Cholesky decomposition of
\cd{cov}, and the two multivariate normal nodes.

In the event you need to ensure that a name is formatted correctly,
you can use the \cd{expandNodeNames} method. For
example, to get the spaces correctly inserted into ``X[1,1:5]'':

<<multivariateExpandNodeNames>>=
@ 

Alternatively, for those inclined to R's less commonly used features, a nice trick is
to use its \cd{parse} and \cd{deparse} functions.  
<<>>=
deparse(parse(text = "X[1,1:5]", keep.source = FALSE)[[1]])
@ 


The \cd{keep.source = FALSE} makes \cd{parse} more efficient.

\subsection{Why use node names?}
\label{sec:why-use-node}

Syntax like \cd{pump[["x[2, 3]"]]} may seem strange at first, because
the natural habit of an R user would be \cd{pump[["x"]][2,3]}.  To see
its utility, consider the example of writing the nimbleFunction given in
Section \ref{sec:creating-your-own}.  By giving every scalar node a name, even
if it is part of a multivariate variable, one can write functions in R
or NIMBLE that access any single node by a name, regardless of the
dimensionality of the variable in which it is embedded.  This is particularly
useful for NIMBLE, which resolves how to access a particular node
during the compilation process.

\section{\cd{calculate}, \cd{calculateDiff}, \cd{simulate}, and \cd{getLogProb}}
\label{sec:cdcalc-cdsim-cdgetl}

The four basic ways to operate a model are to calculate nodes,
simulate into nodes, get the log probabilities (or probability
densities) that have already been calculated, and compare the log probability
of a new value to that of an old value.  In more detail:

\begin{description}
\item[calculate] For a stochastic node,
\cd{calculate} determines the log probability value, stores it in the
appropriate \cd{logProb} variable, and
returns it.  For a deterministic node, \cd{calculate} executes the
deterministic calculation and returns 0.
\item[simulate] For a stochastic node, \cd{simulate} generates a
  random draw.  For deterministic nodes,
\cd{simulate} is equivalent to \cd{calculate} without returning
0. \cd{simulate} always returns \cd{NULL} (or \cd{void} in C++).
\item[getLogProb]   \cd{getLogProb} simply
returns the most recently calculated log probability value, or 0 for a
deterministic node.
\item[calculateDiff]  \cd{calculateDiff} is identical to
  \cd{calculate}, but it returns the new log probability value minus
  the one that was previously stored. This is useful when one wants to
  change the value or values of node(s) in the model (e.g., by setting a value or 
  \cd{simulate}) and then determine
  the change in the log probability, such as needed for a
  Metropolis-Hastings acceptance probability. 
\end{description}

Each of these functions is accessed as a member function of a model
object, taking a vector of node names as an argument.   If there is
more than one node name, \cd{calculate} and \cd{getLogProb} return the
sum of the log probabilities from each node, while \cd{calculateDiff}
returns the sum of the new values minus the old values.  Next we show
an example using \cd{simulate}

\subsection{Example: using \cd{simulate} for arbitrary collections of nodes}
\label{sec:arbitr-coll-nodes}

<<calcSimGLPdemos,results='markup;$=\\$'>>=
@ 

Note the following.
\begin{enumerate}
\item \cd{simulate(model, nodes)} is equivalent to
  \cd{model\$simulate(nodes)}. You can use either, but the latter is
  encouraged and the former may be deprecated inthe future.
\item Inputs like \cd{`y[1:3]'} are automatically expanded into
  \cd{c(`y[1]', `y[2]', `y[3]')}.  In fact, simply \cd{`y'} will be
  expanded into all nodes within \cd{y}.
\item An arbitrary number of nodes can be provided as a character
vector.
\item Simulations will be done in the order provided, so in practice
  the nodes should often be obtained by functions like
  \cd{getDependencies} described below.  These return nodes in
  topologically sorted order, which means no node comes before something
  it depends on.
\item The data nodes \cd{z} were not simulated into until
  \cd{includeData = TRUE} was used.
\end{enumerate}

Use of \cd{calculate}, \cd{calculateDiff} and \cd{getLogProb} are similar to \cd{simulate},
except that they return a value (described above) and they have no \cd{includeData} argument.

\section{Accessing distribution parameter values and distribution bounds}

\subsection{Distribution parameter values}
\label{sec:getParam}

The function \cd{getParam} provides access to values of the parameters
of a distribution.  Like the above functions, \cd{getParam} can be
used as  global function taking a model as the first argument, or it
can be used as a model member function.  The next two arguments must
be the name of one (stochastic) node and the name of a parameter for the
distribution followed by that node.  The parameter does not have to be
one of the parameters used when the node was declared.  Alternative
parameterization values can also be obtained. See
section(\ref{subsec:distributions}) for available parameterizations.
(These can also be seen via \cd{distributionsInputList}.) 

Here is an example:
<<getParamExample, message=FALSE>>=
gammaModel <- nimbleModel(
    nimbleCode({
        a ~ dlnorm(0, 1)
        x ~ dgamma(shape = 2, scale = a)
    }), data = list(x = 2.4), inits = list(a = 1.2))
getParam(gammaModel, 'x', 'scale')
getParam(gammaModel, 'x', 'rate')
gammaModel$getParam('x','rate')
@ 

\cd{getParam} also works in compiled nimbleFunctions.

\subsection{Distribution bounds}
\label{sec:getBound}

The function \cd{getBound} provides access to the lower and upper
bounds of the distribution for a node. In most cases these bounds
will be fixed based on the distribution, but for the uniform distribution
the bounds are the parameters of the distribution, and when truncation (see
Section \ref{subsec:trunc}) is used, the bounds will be determined 
by the truncation. Like the functions described in the previous section, \cd{getBound} can be
used as  global function taking a model as the first argument, or it
can be used as a model member function.  The next two arguments must
be the name of one (stochastic) node and either \cd{'lower'} or \cd{'upper'}
indicating whether the lower or upper bound is desired. For multivariate nodes
the bound is a scalar that is the bound for all elements of the node, as we
do not handle truncation for multivariate nodes. 

Here is an example:
<<getBoundExample, message=FALSE>>=
exampleModel <- nimbleModel(
    nimbleCode({
        y ~ T(dnorm(mu, sd = sig), a, Inf)
        a ~ dunif(-1, b)
        b ~ dgamma(1, 1)
    }), inits = list(a = -0.5, mu = 1, sig = 1, b = 4),
        data = list(y = 4))
getBound(exampleModel, 'y', 'lower')
getBound(exampleModel, 'y', 'upper')
exampleModel$b <- 3
exampleModel$calculate(exampleModel$getDependencies('b'))
getBound(exampleModel, 'a', 'upper')
exampleModel$getBound('b','lower')
@ 

\cd{getBound} also works in compiled nimbleFunctions. In fact, we anticipate that
most use of \cd{getBound} will be for algorithms, such as for the reflection
version of the random walk MCMC sampler.

\section{Querying model structure}
\label{sec:query-model-struct}

NIMBLE provides functions for asking a model about its
structure. These can be used from R, including from the setup code of
a \cd{nimbleFunction} (setup code is described in Chapter \ref{cha:progr-with-models}).  

Here we demonstrate this functionality using the \nm{pump} example because it has a few more interesting components than the example above. 

<<reinitPumpModel,echo=FALSE,message=FALSE>>=
@ 

\subsection{\cd{getNodeNames}, \cd{getVarNames}, and \cd{expandNodeNames}}
\label{sec:cdgetn-cdgetv}


First we'll see how to determine the nodes and variables in a model.

<<getNodeNames>>=
@ 

Note that some of the nodes may be ``lifted'' nodes introduced by
NIMBLE (Section \ref{sec:introduced-nodes}).

Next note that we can determine the set of nodes contained in one or more nodes or variables using \cd{expandNodeNames}. The \cd{returnScalarComponents} argument also allows us to return all of the scalar components of multivariate nodes. 
to illustrate.

<<expandNodeNames>>=
@ 

\subsection{\cd{getDependencies}}
\label{sec:cdgetdependencies}

Next we'll see how to determine the node dependencies (or
``descendents'') in a model. There are a variety of arguments to \cd{getDependencies} that
allow one to specify whether to include the node itself, whether to
include deterministic or stochastic or data dependents, etc. By
default \cd{getDependencies} returns descendants up to the next
stochastic node on all edges emanating from the node(s) specified as input.  This is what would be
needed to calculate a Metropolis-Hastings acceptance probability in
MCMC, for example.

<<getDependencies>>=
@ 


\subsection{\cd{isData}}
\label{sec:cdisdata}

Finally, you can query whether a node is flagged as data using the \cd{isData} method applied to one or more nodes:
<<isData>>=
pump$isData('x[1]')
pump$isData(c('x[1]', 'x[2]', 'alpha'))
@ 


You can also query variables to determine if the nodes that are part of a variable are data nodes.

<<isData2>>=
pump$isData('x')
pump$isData('x[1:3]')
@ 


\section{The \nm{modelValues} data structure}
\label{sec:modelValues-struct}

\cd{modelValues} are containers designed for
storing values for models.  They may be used for model outputs or
model inputs. A modelValues object will contain \emph{rows} of
variables. Each row  contains one object of each variable, which may
be multivariate. The simplest way to build a
modelValues object is from a model object. This will create a
modelValues object with the same variables as the model.  Although
they were motivated by models, one is free to set up a
\cd{modelValues} with any variables one wants.
  
<<intro-mv>>=
pumpModelValues = modelValues(pumpModel, m = 2)
pumpModel$x
pumpModelValues$x
@


In this example, \cd{pumpModelValues} has the same variables as
\cd{pumpModel}, and we set \cd{pumpModelValues} to have \cd{m = 2}
rows. As you can see, the rows are stored as elements of a list.
  
  Alternatively, one can define a modelValues object manually via the
  \cd{modelValuesConf} function, like this:
%%   \begin{itemize}
%%  \item \cd{vars}, which is a character vector of variable names, 
%%    \item \cd{type}, which is a character vector of the data types for each variable (`double' for real numbers, `integer' for integers) and 
%%      \item \cd{size}, which is a list of vectors of the sizes in each dimension of each variable. The names of the list elements must match the names provided in \cd{vars}. 
%% \end{itemize}

<<mvConf>>=
mvConf = modelValuesConf(vars = c('a', 'b', 'c'), 
                         type = c('double', 'int', 'double'), 
                         size = list( a = 2, b =c(2,2)  , c = 1) )

customMV = modelValues(mvConf, m = 2 )
customMV$a
@

The arguments to \cd{modelValuesConf} are matching lists of variable
names, types, and sizes. See \cd{help(modelValuesConf)} for more
details.  Note that in R execution, the types are not enforced.  But
they will be the types created in C++ code during compilation, so they
should be specified carefully.

The object returned by \cd{modelValues} is an uncompiled
modelValues. When a nimbleFunction is compiled, any modelValues
objects it uses are also compiled. A NIMBLE model always contains a
modelValues that it uses as a default location to store its variables.

Here is an example where the \cd{customMV} created above is used as
the setup argument for a nimbleFunction, which is then compiled.  Its
compiled mv is then accessed with \cd{\$}.

<<resize_MV>>=
# Simple nimbleFunction that uses a modelValues object
resizeFunction_Gen <- nimbleFunction(
  setup = function(mv){},
  run = function(k = integer() ){
    resize(mv,k)})

rResize <- resizeFunction_Gen(customMV)
cResize <- compileNimble(rResize)
cCustomMV <- cResize$mv
# cCustomMV is a C++ modelValues object
@

Compiled modelValues objects can be accessed and altered in all the
same ways as uncompiled ones.  However, only uncompiled modelValues
can be used as arguments to setup code in nimbleFunctions.

\subsection{Accessing contents of modelValues}
\label{sec:access-cont-modelv}

The values in a modelValues object can be accessed in several ways
from R, and in fewer ways from NIMBLE.

<<mv-access>>=
# Sets the first row of a to (0, 1).  R only.
customMV[['a']][[1]] <- c(0,1)   

# Sets the second row of a to (2, 3)
customMV['a', 2] <- c(2,3)       

#Can access subsets of each row in standard R manner
customMV['a', 2][2] <- 4

# Accesses all values of 'a'. Output is a list.  R only.
customMV[['a']]                  

# Sets the first row of b to a matrix with values 1. R only.
customMV[['b']][[1]] <- matrix(1, nrow = 2, ncol = 2)  

# Sets the second row of b.  R only.
customMV[['b']][[2]] <- matrix(2, nrow = 2, ncol = 2)  

# Make sure the size of inputs is correct
# customMV['a', 1] <- 1:10  
# Problem: dimension of 'a' is 2, not 10!
# Will cause problems when compiling nimbleFunction using customMV
@

Currently, only the syntax \cd{customMV[`a', 2]} works in the NIMBLE
language, not \cd{customMV[[`a']][[2]]}. Also note that \cd{c()} does not work in NIMBLE, but one can do \cd{customMV[`a', 2] <- X[1:2]}.

We can query and change the number of rows using \cd{getsize} and
\cd{resize}, respectively.  These work in both R and NIMBLE.  Note
that we don't specify the variables in this case: all variables in a
modelValues object will have the same number of rows.
  
<<resize-mv>>=
getsize(customMV)
resize(customMV, 3)
getsize(customMV)
customMV$a
@

Often it is useful to convert a modelValues object to a matrix for use
in R.  For example, we may want to convert MCMC output into a matrix
for use with the \cd{coda} package for processing MCMC samples. This
can be done with the \cd{as.matrix} method for modelValues
objects. This will generate column names from every scalar element of
variables (e.g. "x[1, 1]" ,"x[2, 1]", etc.). The rows of
the modelValues will be the rows of the matrix, with any matrices or
arrays converted to a vector based on column-major ordering.
  
<<as.matrix-mv>>=
as.matrix(customMV, 'a')   # convert 'a'
as.matrix(customMV)        # convert all variables
@

If a variable is a scalar, using \cd{unlist} in R to extract all rows as a vector can be useful.

<<extract_MV_Vector>>=
customMV['c', 1] <- 1
customMV['c', 2] <- 2
customMV['c', 3] <- 3
unlist(customMV['c', ])
@

Once we have a modelValues object, we can see the structure of its
contents via the \cd{varNames} and \cd{sizes} components of the object.

<<mv_VarNames_Sizes>>=
customMV$varNames
customMV$sizes
@

As with most NIMBLE objects, modelValues are passed by reference, not
by value. That means any modifications of modelValues objects in
either R functions or \cd{nimbleFunction}s will persist outside of the
function. This allows for more efficient computation, as stored values
are immediately shared among \cd{nimbleFunction}s.

<<alter_a>>=
alter_a <- function(mv){
  mv['a',1][1] <- 1
}
customMV['a', 1]

alter_a(customMV)
customMV['a',1]

#Note that the first row was changed
@

However, when you retrieve a variable from a modelValues object, the result is a standard R list, which is subsequently passed by value, as usual in R.

\section{NIMBLE passes objects by reference}

NIMBLE relies heavily on R's reference class system.  When models,
modelValues, and nimbleFunctions with setup code are created, NIMBLE
generates a new, customized reference class definition for each.  As a
result, objects of these types are passed by reference and hence
modified in place by most NIMBLE operations. This is necessary to
avoid a great deal of copying and returning and having to reassign
large objects, both in processing model and nimbleFunctions  and in
running algorithms.

One cannot generally copy NIMBLE models or nimbleFunctions
(specializations or generators) in a safe fashion, because of the
references to other objects embedded within NIMBLE objects. However,
the model member function \cd{newModel} will create a new copy of
the model from the same model definition
(Section \ref{sub:multiple-instances}). This new model can then be used with
newly instantiated nimbleFunctions.

%% <<copy-model>>=
%% newPump <- pumpModel$newModel()
%% @ 

The reliable way to create new copies of nimbleFunctions is to re-run
the R function called \cd{nimbleFunction} and record the result in a
new object.  For example, say you have a \cd{nimbleFunction} called
\cd{foo} and 1000 instances of \cd{foo} are compiled as part of an
algorithm related to a model called \cd{model1}.  If you then need to use \cd{foo} in
an algorithm for another model, \cd{model2}, doing so may work without
any problems.  However, there are cases where the NIMBLE compiler will
tell you during compilation that the second set of \cd{foo} instances
cannot be built from the previous compiled version.  A solution is to
re-define \cd{foo} from the beginning -- i.e. call \cd{nimbleFunction}
again -- and then proceed with building and compiling the algorithm
for \cd{model2}.  
