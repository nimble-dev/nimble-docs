%% See http://yihui.name/knitr/demo/child/ for documentation on the parent/child document system of knitr

\Sexpr{set_parent('NimbleUserManual.Rnw')}

\chapter{Installing NIMBLE}
\label{cha:installing-nimble}

\section{Requirements to run NIMBLE}
\label{sec:requ-run-nimble}

You can run NIMBLE on any of the three common operating systems: Linux, Mac OS X, or Windows. 

The following are required to run NIMBLE.

\begin{enumerate}
\item \href{http://www.cran.r-project.org}{R}, of course.
\item The \href{http://www.cran.r-project.org/web/packages/igraph/index.html}{igraph} and  \href{http://www.cran.r-project.org/web/packages/coda/index.html}{coda} R packages.
\item A working C++ compiler that R can use on your system.  There are
  standard open-source C++ compilers that the R community has already
  made easy to install.  You don't need to know anything about C++ to
  use NIMBLE. Please see Section \ref{sec:compiler} for details. This must be done before installing NIMBLE. 


\end{enumerate}

NIMBLE also uses a couple of C++ libraries that you don't need to install, as they will already be on your system or are provided by NIMBLE.
\begin{enumerate}
\item The \href{http://eigen.tuxfamily.org}{Eigen} C++ library
  for linear algebra.  This comes with NIMBLE, or you can use your own copy.
\item The BLAS and LAPACK numerical libraries.  These come with
  R. 
\end{enumerate}

Most fairly recent versions of these requirements should work. 
% [look into giving more detailed version requirements]

\section{Installation}

Since NIMBLE is an R package, you can install it in the usual way, via
\cd{install.packages} or \cd{R CMD INSTALL}. As of version 0.6 NIMBLE is on CRAN.

NIMBLE can also be obtained from \href{http://r-nimble.org}{the NIMBLE website}. To install from our website, please see our \href{http://r-nimble.org/download}{Download page} for the specific invocation of \cd{install.packages}.

For most installations, you can ignore low-level details.
However, there are some options that some users may want to utilize.

\subsection{Using your own copy of Eigen}
%\subsection{Finding the Eigen Header Files}
NIMBLE uses the Eigen C++ template library for linear algebra.  Version 3.2.1
of Eigen is included in the NIMBLE package and that version will be
used unless the package's configuration script finds another version
on the machine.  This works well, and the following is only relevant
if you want to use a different (e.g., newer) version.

The configuration script looks in the standard include directories,
e.g. \cd{/usr/include} and \cd{/usr/local/include} for the header file \cd{Eigen/Dense}.
You can specify a particular location in either of two ways:
\begin{enumerate}
  \item Set the environment variable \cd{EIGEN\_DIR} before installing the R
    package,  e.g., \cd{export EIGEN\_DIR=/usr/include/eigen3} in the bash shell.
  \item Use \\
    \verb|R CMD INSTALL --configure-args='--with-eigen=/path/to/eigen' nimble_VERSION.tar.gz|
      or \\ \cd{install.packages("nimble", configure.args = "--with-eigen=/path/to/eigen")}.
\end{enumerate}  
In these cases, the directory should be the full path to the directory that
contains the Eigen directory, e.g. \cd{/usr/include/eigen3}. It is not the full path to the Eigen
directory itself, i.e., NOT \cd{/usr/include/eigen3/Eigen}.


\subsection{Using libnimble}
NIMBLE generates specialized C++ code for user-specified models and nimbleFunctions.
This code uses some NIMBLE C++ library classes and functions.
By default, on Linux the library code is compiled once as a linkable
library - \nm{libnimble.so}. This single instance of the library is then linked 
with the code for each generated model. In contrast, the default for Windows and Mac OS X
is to compile the library code as a static library - \nm{libnimble.a} - that is compiled into each each model's and each algorithm's own dynamically loadable library (DLL). This does repeat the same code across models and so occupies more memory. There may be a marginal speed advantage. 
If one would like to enable the linkable library in place of the static library (do this only on Mac OS X and other UNIX variants and not on Windows), one can install the source package with the configuration argument \cd{--enable-dylib} set to true. First obtain the NIMBLE source package (which will have the extension \cd{.tar.gz} from \href{http://r-nimble.org/download}{our website} and then install as follows, replacing \cd{VERSION} with the appropriate version number:

\verb|R CMD INSTALL --configure-args='--enable-dylib=true' nimble_VERSION.tar.gz|



\subsection{LAPACK and BLAS} 
NIMBLE also uses BLAS and LAPACK for some of its linear algebra (in particular calculating density values and generating random samples from multivariate distributions). NIMBLE will use the same BLAS and LAPACK installed on your system that R uses. Note that a fast (and where appropriate, threaded) BLAS can greatly increase the speed of linear algebra calculations. See Section A.3.1 of the R Installation and Administration manual for more details on providing a fast BLAS for your R installation. 




\subsection{Problems with Installation}
We have tested the installation on the three commonly used platforms
-- OS X, Linux, Windows\footnote{We've tested NIMBLE on Windows 7 and 8}.  We don't anticipate problems with installation,
but we want to hear about any and help resolve them. 
Please post about installation problems to the nimble-users Google group or 
email \cd{nimble.stats@gmail.com}.


%% commented out by DT, April 2015
%\subsection{RStudio and NIMBLE}   \label{sec:RStudio-problem}
%You can use NIMBLE in RStudio, but we strongly recommend that you turn off the option to display the Global Environment.
%Leaving it on can cause RStudio to freeze, apparently from trying to deal with some of NIMBLE's data structures.

\section{Installing a C++ compiler for R to use}
\label{sec:compiler}

In addition to needing a C++ compiler to install the package (from
source), you also need to have a C++ compiler and the utility \nm{make} at
run-time.  This is needed during the R session to compile the C++
code that NIMBLE generates for a user's models and algorithms.

\subsection{OS X}
On OS X, you should install \nm{Xcode}.  The command-line tools, which are
available as a smaller installation, should be sufficient. This is freely available from the
\href{https://developer.apple.com/xcode/downloads/}{Apple developer
  site} and the
\href{https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12}{App Store}.

For the compiler to work correctly for OS X, it is very important that the installed
R be matched to the correct OS, i.e. R for Snow Leopard will attempt to use
the incorrect compiler if the user has OS 10.9 or higher. 

In the somewhat unlikely event you want to install from the source package rather than the CRAN binary package, the easiest approach is to use the source package provided at \href{http://R-nimble.org}{R-nimble.org}. If you do want to install from the source package provided by CRAN, you'll need to install \href{http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2}{this gfortran package}.

\subsection{Linux}
On Linux, you can install the GNU compiler suite (\nm{gcc}/\nm{g++}). 
You can use the package manager to install pre-built binaries.
On Ubuntu, the following command will install or update \nm{make}, \nm{gcc} and \nm{libc}.
<<chunk1, engine='bash', eval=FALSE>>=
sudo apt-get install build-essential
@ 



\subsection{Windows}
On Windows, you should download and install \file{Rtools.exe} available from
\url{http://cran.r-project.org/bin/windows/Rtools/}.  Select the appropriate
executable corresponding to your version of R.  (We strongly recommend
using the most recent version of R, currently 3.2.1, and hence
\file{Rtools33.exe}).  This installer leads you through several
``pages''.  We think you can accept the defaults with one exception: check the PATH checkbox (page 5) so
that the installer will add the location of the C++ compiler and
related tools to your
system's PATH, ensuring that R can find them.  After you click ``Next'', you will get a page with a
window for customizing the new PATH variable.  You shouldn't need to
do anything there, so you can simply click ``Next'' again.

We note that it is \emph{essential} that the
checkbox for the ``R 2.15+ toolchain'' (page 4) be enabled in order to
have \nm{gcc}/\nm{g++}, \nm{make}, etc. installed.  This should be
checked by default.

Advanced users may wish to change their default compilers. This can be done
by editing the \nm{Makevars} file, see Writing R Externsions: 1.2.1. 

\section{Customizing Compilation of the NIMBLE-generated Code}

For each model or nimbleFunction, the NIMBLE package generates and compiles
C++ code. This uses classes and routines available through the NIMBLE run-time
library and also the Eigen library. The compilation mechanism uses R's
SHLIB functionality and therefore uses the regular R configuration in
\verb|${R_HOME}/etc${R_ARCH}/Makeconf|. NIMBLE places a \file{Makevars}
file in the directory in which the code is generated and \verb|R CMD SHLIB| uses this file.

In all but specialized cases, the general compilation mechanism will
suffice. However, one can customize this.  One can specify the
location of an alternative \file{Makevars} (or \file{Makevars.win})
file to use.  Such an alternative file should define the variables \cd{PKG\_CPPFLAGS} and
\cd{PKG\_LIBS}.  These should contain, respectively, the pre-processor flag
to locate the NIMBLE include directory, and the necessary
libraries to link against (and their location as necessary),
e.g., \nm{Rlapack} and \nm{Rblas} on Windows, and \nm{libnimble}.

Use of this file allows users to specify additional compilation and
linking flags.  See the Writing R Extensions manual for more details
of how this can be used and what it can contain.
