\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

% \chapter{Introduction to programming in NIMBLE}
% \label{cha:intro-programming}


Part \ref{part:programming} is the programmer's guide to NIMBLE. At the heart of programming in NIMBLE are nimbleFunctions.  These support two principle features: separation of a setup function to be run once for each model, nodes, or other setup arguments; and compilation to C++ of other functions writeen in a subset of R enhanced with features to operate models.  Formally, what can be compiled in the NIMBLE language, which is designed to be R-like.

The part of the manual is organized as follows:

\begin{itemize}
\item Chapter \ref{cha:RCfunctions} describes how to write simple nimbleFunctions, which have no setup code and hence don't interact with models, to compile parts of R for fast calculations. This covers the subset of R that is compilable, how to declare argument types and return types, and other information.

\item Chapter \ref{cha:user-defined} explains how to write nimbleFunctions that can be included in BUGS code as user-defined distributions or user-defined functions.

\item Chapter \ref{cha:using-bugs-models} introduces more features of NIMBLE models that are useful for writing nimbleFunctions to use models.  
We then move into the functionality in NIMBLE that allows one to program with models, namely writing nimbleFunctions that interact with models. It describe how to query model structure and carry out model calculations.

\item Chapter \ref{cha:data-structures} introduces two kinds of data structures: \cd{modelValues} are usedful for holding multiple sets of model variables; \cd{nimbleList} data structures are similar to R lists but require fixed element names and types, allowing the NIMBLE compiler to use them. 

\item Chapter \ref{sec:nimble-lang-comp} draws on the previous chapters to show how to write nimbleFunctions that work with models, or more generally that have a setup function for any purpose.  Typically a setup function queries model structure (Ch. \ref{cha:using-bugs-models}) and may establish some \cd{modelValues} or \cd{nimbleList} data structures or configurations (Ch. \ref{cha:data-structures}).  Then run functions written in the same way as simple nimbleFunctions (Ch. \ref{cha:RCfunctions}) along with model operations (Ch. \ref{cha:using-bugs-models}) define algorithm computations that can be compiled via C++.

\end{itemize}